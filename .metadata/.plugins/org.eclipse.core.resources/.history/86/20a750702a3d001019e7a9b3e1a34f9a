package de.dopemc.hardcore.ChatAPI.utils;

import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.Plugin;

import de.dopemc.hardcore.ChatAPI.Main;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
public class Chatyml {

    private final Plugin plugin;
    private FileConfiguration chatConfig;
    private File chatConfigFile;

    private boolean globalMuted = false;
    private long globalMuteEndTime = 0;
    private final Map<UUID, Long> playerMuteEndTime = new HashMap<>();

    public Chatyml(Plugin plugin) {
        this.plugin = plugin;
        loadConfig();
    }

    public void loadConfig() {
        chatConfigFile = new File(plugin.getDataFolder(), "chat.yml");
        if (!chatConfigFile.exists()) {
            chatConfigFile.getParentFile().mkdirs();
            plugin.saveResource("chat.yml", false); // Speichert die Standard-chat.yml aus dem JAR
        }
        chatConfig = YamlConfiguration.loadConfiguration(chatConfigFile);

        globalMuted = chatConfig.getBoolean("global.muted", false);
        globalMuteEndTime = chatConfig.getLong("global.endTime", 0);

        if (chatConfig.contains("players")) {
            for (String uuidString : chatConfig.getConfigurationSection("players").getKeys(false)) {
                try {
                    UUID uuid = UUID.fromString(uuidString);
                    long endTime = chatConfig.getLong("players." + uuidString);
                    if (endTime > System.currentTimeMillis()) {
                        playerMuteEndTime.put(uuid, endTime);
                    }
                } catch (IllegalArgumentException e) {
                }
            }
        }
    }

    public void saveConfig() {
        if (chatConfig != null) {
            chatConfig.set("global.muted", globalMuted);
            chatConfig.set("global.endTime", globalMuteEndTime);

            chatConfig.set("players", null); // Clear existing player mutes
            for (Map.Entry<UUID, Long> entry : playerMuteEndTime.entrySet()) {
                chatConfig.set("players." + entry.getKey().toString(), entry.getValue());
            }

            try {
                chatConfig.save(chatConfigFile);
            } catch (IOException e) {
            }
        } else {
        }
    }

    // Getter- und Setter-Methoden für die Daten (optional, aber nützlich)

    public boolean isGlobalMuted() {
        return globalMuted;
    }

    public void setGlobalMuted(boolean globalMuted) {
        this.globalMuted = globalMuted;
    }

    public long getGlobalMuteEndTime() {
        return globalMuteEndTime;
    }

    public void setGlobalMuteEndTime(long globalMuteEndTime) {
        this.globalMuteEndTime = globalMuteEndTime;
    }

    public Map<UUID, Long> getPlayerMuteEndTime() {
        return playerMuteEndTime;
    }

    // Methode zum Hinzufügen oder Aktualisieren eines stummgeschalteten Spielers
    public void mutePlayer(UUID playerId, long endTime) {
        playerMuteEndTime.put(playerId, endTime);
    }

    // Methode zum Entfernen eines stummgeschalteten Spielers
    public void unmutePlayer(UUID playerId) {
        playerMuteEndTime.remove(playerId);
    }
}
